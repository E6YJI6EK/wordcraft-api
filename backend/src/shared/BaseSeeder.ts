import { Model, Document } from "mongoose";

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Å–∏–¥–µ—Ä–æ–≤
export interface ISeeder<T extends Document> {
  model: Model<T>;
  data: Partial<T>[];
  run(): Promise<T[]>;
}

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–∏–¥–µ—Ä–∞
export abstract class BaseSeeder<T extends Document> implements ISeeder<T> {
  public abstract model: Model<T>;
  public abstract data: Partial<T>[];

  /**
   * –ó–∞–ø—É—Å–∫ —Å–∏–¥–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
   */
  async run(): Promise<T[]> {
    if (!this.model) {
      throw new Error("Model not defined");
    }

    if (!this.data || this.data.length === 0) {
      console.log(`‚ö†Ô∏è No data provided for ${this.model.modelName}`);
      return [];
    }

    try {
      // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–∏–¥–∏–Ω–≥–æ–º
      // await this.model.deleteMany({});
      // console.log(`üßπ Cleared ${this.model.modelName} collection`);

      // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const result = await this.model.insertMany(this.data as any);
      console.log(`‚úÖ Seeded ${result.length} ${this.model.modelName} records`);

      return result;
    } catch (error) {
      console.error(`‚ùå Failed to seed ${this.model.modelName}:`, error);
      throw error;
    }
  }

  /**
   * –°–∏–¥–∏–Ω–≥ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
   */
  async runWithoutClear(): Promise<T[]> {
    if (!this.model) {
      throw new Error("Model not defined");
    }

    try {
      const result = await this.model.insertMany(this.data as any);
      console.log(
        `‚úÖ Added ${result.length} ${this.model.modelName} records without clearing`
      );
      return result;
    } catch (error) {
      console.error(`‚ùå Failed to add ${this.model.modelName} records:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–∏–¥–∏–Ω–≥–æ–º
   */
  async shouldSeed(): Promise<boolean> {
    if (!this.model) return false;

    const count = await this.model.countDocuments();
    return count === 0;
  }

  /**
   * –°–∏–¥–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞
   */
  async runIfEmpty(): Promise<T[] | null> {
    if (await this.shouldSeed()) {
      return await this.run();
    }

    console.log(
      `‚è≠Ô∏è ${this.model.modelName} already has data, skipping seeding`
    );
    return null;
  }
}
